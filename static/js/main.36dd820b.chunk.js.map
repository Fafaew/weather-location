{"version":3,"sources":["api/fetchWeather.js","App.js","reportWebVitals.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","location","setLocation","weather","setWeather","setQuery","search","e","key","getWeather","lat","long","lon","appid","process","lang","res","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAKaA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEACDC,IAAMC,IAJrB,kDAI8B,CAClCC,OAAQ,CACJC,EAAGL,EACHM,MAAO,SACPC,MAPI,sCAEY,uBAChBC,EADgB,EAChBA,KADgB,kBASjBA,GATiB,2CAAH,sD,eC+EVC,MA/Ef,WAAgB,IAAD,EACmBC,oBAAS,GAD5B,mBACNC,EADM,KACIC,EADJ,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,mBAAS,IAHtB,mBAGNV,EAHM,KAGCe,EAHD,KAKPC,EAAM,uCAAG,WAAOC,GAAP,eAAAhB,EAAA,yDACC,UAAVgB,EAAEC,IADO,gCAEQnB,EAAaC,GAFrB,OAELQ,EAFK,OAIXM,EAAWN,GACXO,EAAS,IALE,2CAAH,sDASRI,EAAU,uCAAG,WAAOC,EAAKC,GAAZ,eAAApB,EAAA,sEACCC,IAAMC,IACpB,kDACA,CACEC,OAAQ,CACNgB,IAAKA,EACLE,IAAKD,EACLE,MAAOC,mCACPC,KAAM,KACNnB,MAAO,YATE,OACXoB,EADW,OAafZ,EAAWY,EAAIlB,MAbA,2CAAH,wDAuBd,OAPAmB,qBAAU,WACRC,UAAUC,YAAYC,oBAAmB,SAACC,GACxCZ,EAAWY,EAASC,OAAOC,SAAUF,EAASC,OAAOE,WACrDtB,GAAY,QAEb,KAEc,IAAbD,EACK,cAAC,WAAD,8DACc,IAAZE,EACF,cAAC,WAAD,iCAGL,cAAC,WAAD,UACE,sBAAKsB,UAAU,iBAAf,UACE,uBACEC,KAAK,OACLD,UAAU,SACVE,YAAY,yBACZC,MAAOtC,EACPuC,SAAU,SAACtB,GAAD,OAAOF,EAASE,EAAEuB,OAAOF,QACnCG,WAAYzB,IAEbH,EAAQ6B,MACP,sBAAKP,UAAU,OAAf,UACE,qBAAIA,UAAU,YAAd,UACE,+CAAkBtB,EAAQ8B,QAC1B,8BAAM9B,EAAQ+B,IAAIC,aAEpB,sBAAKV,UAAU,YAAf,UACGW,KAAKC,MAAMlC,EAAQ6B,KAAKM,MACzB,wCAFF,OAIA,sBAAKb,UAAU,OAAf,UACE,qBACEA,UAAU,YACVc,IAAG,4CAAuCpC,EAAQA,QAAQ,GAAGqC,KAA1D,WACHC,IAAKtC,EAAQA,QAAQ,GAAGuC,cAE1B,4BAAIvC,EAAQA,QAAQ,GAAGuC,0BC9DxBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.36dd820b.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'eb6070552ce7c9247727f4725e40f98e';\n\nexport const fetchWeather = async (query) => {\n    const { data } = await axios.get(URL, {\n        params: {\n            q: query,\n            units: 'metric',\n            APPID: API_KEY,\n        }\n    });\n\n    return data;\n}\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { fetchWeather } from \"./api/fetchWeather\";\nimport \"./App.css\";\n\nfunction App() {\n  const [location, setLocation] = useState(false);\n  const [weather, setWeather] = useState(false);\n  const [query, setQuery] = useState(\"\");\n\n  const search = async (e) => {\n    if (e.key === \"Enter\") {\n      const data = await fetchWeather(query);\n\n      setWeather(data);\n      setQuery(\"\");\n    }\n  };\n\n  let getWeather = async (lat, long) => {\n    let res = await axios.get(\n      \"https://api.openweathermap.org/data/2.5/weather\",\n      {\n        params: {\n          lat: lat,\n          lon: long,\n          appid: process.env.REACT_APP_OPEN_WEATHER_KEY,\n          lang: \"pt\",\n          units: \"metric\",\n        },\n      }\n    );\n    setWeather(res.data);\n  };\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      getWeather(position.coords.latitude, position.coords.longitude);\n      setLocation(true);\n    });\n  }, []);\n\n  if (location === false) {\n    return <Fragment> You need turn on the location in your browser</Fragment>;\n  } else if (weather === false) {\n    return <Fragment>Loading Weather...</Fragment>;\n  } else {\n    return (\n      <Fragment>\n        <div className=\"main-container\">\n          <input\n            type=\"text\"\n            className=\"search\"\n            placeholder=\"Search Another City...\"\n            value={query}\n            onChange={(e) => setQuery(e.target.value)}\n            onKeyPress={search}\n          />\n          {weather.main && (\n            <div className=\"city\">\n              <h2 className=\"city-name\">\n                <span>Weather in {weather.name}</span>\n                <sup>{weather.sys.country}</sup>\n              </h2>\n              <div className=\"city-temp\">\n                {Math.round(weather.main.temp)}\n                <sup>&deg;C</sup>+\n              </div>\n              <div className=\"info\">\n                <img\n                  className=\"city-icon\"\n                  src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n                  alt={weather.weather[0].description}\n                />\n                <p>{weather.weather[0].description}</p>\n              </div>\n            </div>\n          )}\n        </div>\n        </Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}